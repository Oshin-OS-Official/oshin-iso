var r=Object.defineProperty;var a=(n,e,i)=>e in n?r(n,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):n[e]=i;var o=(n,e,i)=>(a(n,typeof e!="symbol"?e+"":e,i),i);import{A as t,k as l}from"./CoreAPI.js";import d from"./BlockedPageOnboardingRequiredOverlayView.js";import u from"./BlockedPageOnboardingRequiredOverlayModel.js";import"./Logger.js";var s=t.Utils.createScopedLog("BlockedPageOnboardingRequiredOverlayController");class v{constructor(){o(this,"view",null);o(this,"model",null);o(this,"dismissTimeoutStorageKey","action-required-overlay-dismiss-timeout");s("constructor","Constructing controller",null,"DEBUG"),this.model=new u,this.view=new d}async init(){s("init","Initializing controller",null,"DEBUG"),await Promise.all([t.Settings.initAsync(),t.Requirements.init(),t.Analytics.init()]),this.addListener()}async mountView(){if(s("mountView","Mounting view",null,"DEBUG"),this.model.hasBeenShown||t.Settings.get("isNewUser"))return;const i=await t.Storage.get(this.dismissTimeoutStorageKey);i!=null&&i>=Date.now()||await t.Requirements.isOnboardingCompleted()||(this.view.init(),this.model.hasBeenShown=!0)}addListener(){t.PubSub.listen("StayFocusd.timer.updated",()=>{this.mountView()}),window.addEventListener("message",async e=>{if(e.data!=="BlockedPageOnboardingRequired.dismiss")return;const i=Date.now()+5*l;await t.Storage.set({[this.dismissTimeoutStorageKey]:i}),this.view.remove()})}}export{v as default};
//# sourceMappingURL=BlockedPageOnboardingRequiredOverlayController.js.map
