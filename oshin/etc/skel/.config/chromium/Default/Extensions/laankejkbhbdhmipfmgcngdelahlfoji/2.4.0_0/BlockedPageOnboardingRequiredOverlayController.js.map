{"version":3,"file":"BlockedPageOnboardingRequiredOverlayController.js","sources":["../src/components/BlockedPageOnboardingRequiredOverlay/BlockedPageOnboardingRequiredOverlayController.js"],"sourcesContent":["import API from '~/core/CoreAPI'\nimport { MINUTE } from '~/core/Time'\nimport View from './BlockedPageOnboardingRequiredOverlayView'\nimport Model from './BlockedPageOnboardingRequiredOverlayModel'\n\nvar log = API.Utils.createScopedLog(\n  'BlockedPageOnboardingRequiredOverlayController',\n)\n\nexport default class BlockedPageOnboardingRequiredOverlayController {\n  view = null\n  model = null\n\n  dismissTimeoutStorageKey = 'action-required-overlay-dismiss-timeout'\n\n  constructor() {\n    log('constructor', 'Constructing controller', null, 'DEBUG')\n\n    this.model = new Model()\n    this.view = new View()\n  }\n\n  async init() {\n    log('init', 'Initializing controller', null, 'DEBUG')\n\n    await Promise.all([\n      API.Settings.initAsync(),\n      API.Requirements.init(),\n      API.Analytics.init(),\n    ])\n\n    this.addListener()\n  }\n\n  async mountView() {\n    log('mountView', 'Mounting view', null, 'DEBUG')\n\n    // Storage doesn't update when the user completes onboarding, so we shouldn't show it again until the page reloads\n    if (this.model.hasBeenShown) return\n\n    // Don't show the overlay to new users, only existing users\n    const isNewUser = API.Settings.get('isNewUser')\n    if (isNewUser) return\n\n    // Don't show the overlay immediately after being dismissed\n    const dismissTimeout = await API.Storage.get(this.dismissTimeoutStorageKey)\n    if (dismissTimeout != null && dismissTimeout >= Date.now()) return\n\n    // Don't show the overlay to users who have already completed onboarding\n    const isCompleted = await API.Requirements.isOnboardingCompleted()\n    if (isCompleted) return\n\n    this.view.init()\n    this.model.hasBeenShown = true\n  }\n\n  addListener() {\n    API.PubSub.listen('StayFocusd.timer.updated', () => {\n      this.mountView()\n    })\n\n    window.addEventListener('message', async (event) => {\n      if (event.data !== 'BlockedPageOnboardingRequired.dismiss') return\n\n      const showAgainAt = Date.now() + 5 * MINUTE\n      await API.Storage.set({\n        [this.dismissTimeoutStorageKey]: showAgainAt,\n      })\n      this.view.remove()\n    })\n  }\n}\n"],"names":["log","API","BlockedPageOnboardingRequiredOverlayController","__publicField","Model","View","dismissTimeout","event","showAgainAt","MINUTE"],"mappings":"+VAKA,IAAIA,EAAMC,EAAI,MAAM,gBAClB,gDACF,EAEe,MAAMC,CAA+C,CAMlE,aAAc,CALdC,EAAA,YAAO,MACPA,EAAA,aAAQ,MAERA,EAAA,gCAA2B,2CAGzBH,EAAI,cAAe,0BAA2B,KAAM,OAAO,EAE3D,KAAK,MAAQ,IAAII,EACjB,KAAK,KAAO,IAAIC,CACjB,CAED,MAAM,MAAO,CACXL,EAAI,OAAQ,0BAA2B,KAAM,OAAO,EAEpD,MAAM,QAAQ,IAAI,CAChBC,EAAI,SAAS,UAAW,EACxBA,EAAI,aAAa,KAAM,EACvBA,EAAI,UAAU,KAAM,CAC1B,CAAK,EAED,KAAK,YAAa,CACnB,CAED,MAAM,WAAY,CAQhB,GAPAD,EAAI,YAAa,gBAAiB,KAAM,OAAO,EAG3C,KAAK,MAAM,cAGGC,EAAI,SAAS,IAAI,WAAW,EAC/B,OAGf,MAAMK,EAAiB,MAAML,EAAI,QAAQ,IAAI,KAAK,wBAAwB,EACtEK,GAAkB,MAAQA,GAAkB,KAAK,IAAK,GAGtC,MAAML,EAAI,aAAa,sBAAuB,IAGlE,KAAK,KAAK,KAAM,EAChB,KAAK,MAAM,aAAe,GAC3B,CAED,aAAc,CACZA,EAAI,OAAO,OAAO,2BAA4B,IAAM,CAClD,KAAK,UAAW,CACtB,CAAK,EAED,OAAO,iBAAiB,UAAW,MAAOM,GAAU,CAClD,GAAIA,EAAM,OAAS,wCAAyC,OAE5D,MAAMC,EAAc,KAAK,IAAK,EAAG,EAAIC,EACrC,MAAMR,EAAI,QAAQ,IAAI,CACpB,CAAC,KAAK,wBAAwB,EAAGO,CACzC,CAAO,EACD,KAAK,KAAK,OAAQ,CACxB,CAAK,CACF,CACH"}