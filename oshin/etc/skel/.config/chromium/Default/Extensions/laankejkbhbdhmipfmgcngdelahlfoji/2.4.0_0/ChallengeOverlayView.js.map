{"version":3,"file":"ChallengeOverlayView.js","sources":["../src/components/Challenge/views/overlay/overlay.tpl?raw","../src/components/Challenge/views/overlay/ChallengeOverlayView.js"],"sourcesContent":["export default \"<div id=\\\"challenge-overlay\\\" class=\\\"p-4 prose bg-white rounded-md\\\">\\n    <div class=\\\"not-prose flex justify-between items-center\\\">\\n        <h1 class=\\\"text-stylized text-2xl font-medium\\\">Challenge</h1>\\n        <button class=\\\"btn btn-sm btn-circle btn-ghost\\\" data-close>\\n            <iconify-icon icon=\\\"mdi:close\\\" width=\\\"20\\\" height=\\\"20\\\" />\\n        </button>\\n    </div>\\n    <p class=\\\"instructions\\\">\\n        In order to change your settings, you'll have to pass this challenge first. You must re-type the paragraph below, letter for letter, <b>without making a single typo</b>. If you make a typo, or hit the backspace or delete key, everything you typed will be cleared, and you'll have to start again.\\n    </p>\\n    <fieldset class=\\\"border border-solid border-base-300 p-2 mb-4 rounded-md\\\">\\n        <legend class=\\\"border border-solid border-base-300 px-2 py-1 rounded-md\\\">Re-type the text below</legend>\\n        <div id=\\\"challengeSource\\\" class=\\\"h-1/4 overflow-y-auto\\\">{{text}}</div>\\n    </fieldset>\\n    <textarea id=\\\"challengeText\\\" class=\\\"textarea textarea-bordered w-full h-40\\\" />\\n    <div class=\\\"flex justify-between not-prose items-center mt-4 gap-4 flex-wrap\\\">\\n        <button class=\\\"btn btn-sm btn-secondary\\\" data-close>Nevermind, I give up</button>\\n        <a id=\\\"productivityBypass\\\" class=\\\"btn btn-sm btn-outline text-right gap-2\\\">\\n            <span>Let me access <i>limited</i> settings so I can be more productive</span>\\n            <iconify-icon icon=\\\"mdi:arrow-right\\\" width=\\\"20\\\" height=\\\"20\\\" />\\n        </a>\\n    </div>\\n</div>\\n\"","import Logger from '~/core/Logger'\nimport API from '~/core/CoreAPI'\nimport Brightline from 'brightline.js'\nimport overlayTpl from './overlay.tpl?raw'\nimport ChallengeView from '../../ChallengeView'\nimport $original from 'jquery'\n\nlet $\n\n/**\n * Alias for Logger.log(). Prepends class name to funcName.\n *\n * @param originator The name of the instance to prepend to the log message\n * @param funcName The name of the function generating the log message\n * @param message The message to log\n * @param payload Data object\n * @param level Log level (ERROR, WARN, INFO, DEBUG)\n */\nvar log = function (originator, funcName, message, payload, level) {\n  Logger.log(originator + '.' + funcName, message, payload, level)\n}\n\nexport default class ChallengeOverlayView extends ChallengeView {\n  /**\n   * Store the last\n   */\n  lastKeyDown = 0\n\n  /**\n   * Pass in instance of jQuery bound to page in which view is being rendered\n   *\n   * @param jQuery\n   */\n  setJQuery(jQuery) {\n    log(this.originator, 'setJQuery', 'Setting jQuery')\n    $ = jQuery || $original\n  }\n\n  /**\n   * Injects rendered view into jQuery container\n   *\n   * @param $container jQuery element into which view should be injected\n   */\n  inject($container) {\n    super.inject($container, this.render(overlayTpl))\n\n    var self = this\n\n    API.PubSub.listen('ChallengeModel.text.set', function () {\n      $('#challengeSource').html(self.model.getText())\n    })\n  }\n\n  /**\n   * Renders view\n   */\n  render(tpl) {\n    log(this.originator, 'render', 'Rendering view')\n\n    tpl = tpl || ''\n    var template = new Brightline(tpl)\n\n    template.set('text', this.model.getText())\n\n    return template.render()\n  }\n\n  /**\n   * Binds handlers to UI\n   */\n  bindUIHandlers() {\n    log(this.originator, 'bindUIHandlers', 'Binding UI handlers', null, 'TRACE')\n\n    var self = this\n    var $challengeText = $('#challengeText')\n    var $close = $('#challenge-overlay *[data-close]')\n    var $productivityBypass = $('#productivityBypass')\n\n    $close.click(this.onCloseClicked.bind(this))\n\n    $productivityBypass.click(self.model.setProductivityBypass.bind(self.model))\n\n    $challengeText.keydown(this.onKeyDown.bind(this))\n\n    $challengeText.on('input', function () {\n      self.onInput($(this).val())\n    })\n  }\n\n  /**\n   * Closes tab when \"close\" link is clicked\n   */\n  onCloseClicked() {\n    API.Chrome.Tab.getSelected(null, function (tab) {\n      API.Chrome.Tab.remove(tab.id)\n    })\n  }\n\n  /**\n   * Updates key counter when key is pressed, if it's not an excluded key\n   *\n   * @param e keydown event\n   * @returns {boolean}\n   */\n  onKeyDown(e) {\n    this.lastKeyDown = e.keyCode\n  }\n\n  onInput(inputText) {\n    if (inputText.length - this.model.getKeyCounter() > 1) {\n      alert(API.Chrome.Translation.get('numberOfKeysDoesNotMatch'))\n      this.resetChallenge()\n      return false\n    }\n\n    this.model.updateKeyCounter(inputText.length)\n\n    if (!this.model.isCorrect(inputText, this.lastKeyDown === 229 ? -1 : 0)) {\n      alert(API.Chrome.Translation.get('madeAMistake'))\n\n      this.resetChallenge()\n\n      return false\n    }\n\n    if (this.model.isComplete(inputText)) {\n      $.modal.close()\n      this.resetChallenge()\n      API.PubSub.publish('Challenge.complete')\n    }\n  }\n\n  /**\n   * Clears the challenge text box, and resets the key counter\n   */\n  resetChallenge() {\n    log(this.originator, 'resetChallenge', 'Resetting challenge')\n\n    var $challengeText = $('#challengeText')\n\n    $challengeText.val('')\n    $challengeText.focus()\n\n    this.model.resetKeyCounter()\n  }\n}\n"],"names":["overlayTpl","$","log","originator","funcName","message","payload","level","Logger","ChallengeOverlayView","ChallengeView","__publicField","jQuery","$original","$container","self","API","tpl","template","Brightline","$challengeText","$close","$productivityBypass","tab","inputText"],"mappings":"mVAAA,MAAeA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECOf,IAAIC,EAWJ,IAAIC,EAAM,SAAUC,EAAYC,EAAUC,EAASC,EAASC,EAAO,CACjEC,EAAO,IAAIL,EAAa,IAAMC,EAAUC,EAASC,EAASC,CAAK,CACjE,EAEe,MAAME,UAA6BC,CAAc,CAAjD,kCAIbC,EAAA,mBAAc,GAOd,UAAUC,EAAQ,CAChBV,EAAI,KAAK,WAAY,YAAa,gBAAgB,EAClDD,EAAIW,GAAUC,CACf,CAOD,OAAOC,EAAY,CACjB,MAAM,OAAOA,EAAY,KAAK,OAAOd,CAAU,CAAC,EAEhD,IAAIe,EAAO,KAEXC,EAAI,OAAO,OAAO,0BAA2B,UAAY,CACvDf,EAAE,kBAAkB,EAAE,KAAKc,EAAK,MAAM,SAAS,CACrD,CAAK,CACF,CAKD,OAAOE,EAAK,CACVf,EAAI,KAAK,WAAY,SAAU,gBAAgB,EAE/Ce,EAAMA,GAAO,GACb,IAAIC,EAAW,IAAIC,EAAWF,CAAG,EAEjC,OAAAC,EAAS,IAAI,OAAQ,KAAK,MAAM,QAAO,CAAE,EAElCA,EAAS,OAAQ,CACzB,CAKD,gBAAiB,CACfhB,EAAI,KAAK,WAAY,iBAAkB,sBAAuB,KAAM,OAAO,EAE3E,IAAIa,EAAO,KACPK,EAAiBnB,EAAE,gBAAgB,EACnCoB,EAASpB,EAAE,kCAAkC,EAC7CqB,EAAsBrB,EAAE,qBAAqB,EAEjDoB,EAAO,MAAM,KAAK,eAAe,KAAK,IAAI,CAAC,EAE3CC,EAAoB,MAAMP,EAAK,MAAM,sBAAsB,KAAKA,EAAK,KAAK,CAAC,EAE3EK,EAAe,QAAQ,KAAK,UAAU,KAAK,IAAI,CAAC,EAEhDA,EAAe,GAAG,QAAS,UAAY,CACrCL,EAAK,QAAQd,EAAE,IAAI,EAAE,IAAG,CAAE,CAChC,CAAK,CACF,CAKD,gBAAiB,CACfe,EAAI,OAAO,IAAI,YAAY,KAAM,SAAUO,EAAK,CAC9CP,EAAI,OAAO,IAAI,OAAOO,EAAI,EAAE,CAClC,CAAK,CACF,CAQD,UAAU,EAAG,CACX,KAAK,YAAc,EAAE,OACtB,CAED,QAAQC,EAAW,CACjB,GAAIA,EAAU,OAAS,KAAK,MAAM,cAAe,EAAG,EAClD,aAAMR,EAAI,OAAO,YAAY,IAAI,0BAA0B,CAAC,EAC5D,KAAK,eAAgB,EACd,GAKT,GAFA,KAAK,MAAM,iBAAiBQ,EAAU,MAAM,EAExC,CAAC,KAAK,MAAM,UAAUA,EAAW,KAAK,cAAgB,IAAM,GAAK,CAAC,EACpE,aAAMR,EAAI,OAAO,YAAY,IAAI,cAAc,CAAC,EAEhD,KAAK,eAAgB,EAEd,GAGL,KAAK,MAAM,WAAWQ,CAAS,IACjCvB,EAAE,MAAM,MAAO,EACf,KAAK,eAAgB,EACrBe,EAAI,OAAO,QAAQ,oBAAoB,EAE1C,CAKD,gBAAiB,CACfd,EAAI,KAAK,WAAY,iBAAkB,qBAAqB,EAE5D,IAAIkB,EAAiBnB,EAAE,gBAAgB,EAEvCmB,EAAe,IAAI,EAAE,EACrBA,EAAe,MAAO,EAEtB,KAAK,MAAM,gBAAiB,CAC7B,CACH"}