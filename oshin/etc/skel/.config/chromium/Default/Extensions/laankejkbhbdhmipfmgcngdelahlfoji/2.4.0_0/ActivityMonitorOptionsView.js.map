{"version":3,"file":"ActivityMonitorOptionsView.js","sources":["../src/components/ActivityMonitor/views/options/options.tpl?raw","../src/components/ActivityMonitor/views/options/ActivityMonitorOptionsView.js"],"sourcesContent":["export default \"<h4>\\n    \\\"Are you still there?\\\" overlay\\n</h4>\\n<p>\\n    The \\\"Are you still there?\\\" overlay appears when your browser has been idle (no mouse movement, no keyboard input) for {{minutes}} minutes.\\n</p>\\n<p>\\n    <label class=\\\"label justify-start gap-3\\\">\\n        <input type=\\\"checkbox\\\" class=\\\"checkbox checkbox-sm checkbox-primary\\\" id=\\\"disableActivityMonitor\\\" {{checked}} />\\n        <span class=\\\"label-text\\\">Never show \\\"Are you still there?\\\" overlay</span>\\n    </label>\\n</p>\\n<hr />\\n\"","import Logger from '~/core/Logger'\nimport Brightline from 'brightline.js'\nimport optionsTpl from './options.tpl?raw'\nimport $original from 'jquery'\n\nlet $ = $original\n\n/**\n * Alias for Logger.log(). Prepends class name to funcName.\n *\n * @param originator The name of the instance to prepend to the log message\n * @param funcName The name of the function generating the log message\n * @param message The message to log\n * @param payload Data object\n * @param level Log level (ERROR, WARN, INFO, DEBUG)\n */\nvar log = function (originator, funcName, message, payload, level) {\n  Logger.log(originator + '.' + funcName, message, payload, level)\n}\n\nexport default class ActivityMonitorOptionsView {\n  model = null\n\n  /**\n   * Pass in instance of jQuery bound to page in which view is being rendered\n   *\n   * @param jQuery\n   */\n  setJQuery(jQuery) {\n    $ = jQuery || $original\n    log(this.originator, 'setJQuery', 'Setting jQuery')\n  }\n\n  /**\n   * Renders view template\n   */\n  render(model) {\n    log(this.originator, 'render', 'Rendering view', null, 'DEBUG')\n\n    var template = new Brightline(optionsTpl)\n    template.set('minutes', model.maxInactiveTime / 60)\n\n    if (model.isDisabled()) {\n      template.set('checked', 'checked=\"checked\"')\n    }\n\n    var html = $(template.render())\n\n    this.bindUIHandlers(model, html)\n\n    return html\n  }\n\n  /**\n   * Binds handlers to UI\n   */\n  bindUIHandlers(model, html) {\n    log(this.originator, 'bindUIHandlers', 'Binding UI handlers', null, 'TRACE')\n\n    $('#disableActivityMonitor', html).click(function () {\n      model.toggle()\n    })\n  }\n}\n"],"names":["optionsTpl","$","$original","log","originator","funcName","message","payload","level","Logger","ActivityMonitorOptionsView","__publicField","jQuery","model","template","Brightline","html"],"mappings":"gRAAA,MAAeA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECKf,IAAIC,EAAIC,EAWR,IAAIC,EAAM,SAAUC,EAAYC,EAAUC,EAASC,EAASC,EAAO,CACjEC,EAAO,IAAIL,EAAa,IAAMC,EAAUC,EAASC,EAASC,CAAK,CACjE,EAEe,MAAME,CAA2B,CAAjC,cACbC,EAAA,aAAQ,MAOR,UAAUC,EAAQ,CAChBX,EAAIW,GAAUV,EACdC,EAAI,KAAK,WAAY,YAAa,gBAAgB,CACnD,CAKD,OAAOU,EAAO,CACZV,EAAI,KAAK,WAAY,SAAU,iBAAkB,KAAM,OAAO,EAE9D,IAAIW,EAAW,IAAIC,EAAWf,CAAU,EACxCc,EAAS,IAAI,UAAWD,EAAM,gBAAkB,EAAE,EAE9CA,EAAM,cACRC,EAAS,IAAI,UAAW,mBAAmB,EAG7C,IAAIE,EAAOf,EAAEa,EAAS,OAAM,CAAE,EAE9B,YAAK,eAAeD,EAAOG,CAAI,EAExBA,CACR,CAKD,eAAeH,EAAOG,EAAM,CAC1Bb,EAAI,KAAK,WAAY,iBAAkB,sBAAuB,KAAM,OAAO,EAE3EF,EAAE,0BAA2Be,CAAI,EAAE,MAAM,UAAY,CACnDH,EAAM,OAAQ,CACpB,CAAK,CACF,CACH"}