define(["core/Logger","core/CoreAPI"],function(Logger,API){return class{id=null;items={};itemStorageKeys={};numItems=0;idCounter=0;Model=null;load(id,callback){var self=this,key=this.getStorageKey(id);this.id=id,API.Storage.get(key,function(data){self.hydrate(data),API.Storage.get(self.itemStorageKeys,function(data){for(var key in data){var thisModel;data.hasOwnProperty(key)&&(thisModel=self.create(data[key]),self.add(thisModel,self.itemStorageKeys[key]))}"function"==typeof callback&&callback(self)})})}save(storageBucket,callback){if(!this.id)throw new Error("["+this.originator+".save()] Collection must have an id before being saved");var self=this,data={},key=this.getStorageKey();this.each(function(item,id){id=self.getItemStorageKey(id);data[id]=item.dehydrate()}),data[key]=this.dehydrate(),API.Storage.set(data,callback,storageBucket)}create(data){if(!this.Model){var componentName=this.getComponentName();if(this.Model=API.Component.getClass(componentName,"Model"),!this.Model)throw new Error("["+this.originator+".load()] Could not load "+componentName+"Model class")}componentName=new this.Model;return data&&componentName.hydrate(data),componentName}getStorageKey(id){return id=id||this.id,this.getClassName()+"_"+id}getItemStorageKey(id){return this.getClassName()+"_item_"+id}dehydrate(){var prop,data={},ignore={items:!0,numItems:!0};for(prop in this)!this.hasOwnProperty(prop)||"function"==typeof this[prop]||prop in ignore||(data[prop]=this[prop]);return data}hydrate(data){for(var prop in data)data.hasOwnProperty(prop)&&(this[prop]=data[prop])}add(item,id){(id=void 0===id?"object"==typeof item&&null!==item?item.id:this.getNextID():id)in this.items||(this.numItems+=1),this.items[id]=item;item=this.getItemStorageKey(id);return this.itemStorageKeys[item]=id}remove(id){this.has(id)&&(delete this.items[id],delete this.itemStorageKeys[id],--this.numItems)}has(id){return id in this.items}get(id){return this.has(id)?this.items[id]:null}getMany(ids){for(var many={},i=0;i<ids.length;i++)many[ids[i]]=this.get(ids[i]);return many}each(callback){for(var id in this.items)if(this.items.hasOwnProperty(id))if(!1===callback(this.items[id],id))break}getAll(){return this.items}count(){return this.numItems}isEmpty(){return 0===this.numItems}clear(){this.items={},this.itemStorageKeys={},this.numItems=0}getNextID(){return this.idCounter+=1,this.has(this.idCounter)?this.getNextID():this.idCounter}}});