define(["core/Logger","core/CoreAPI","components/List/ListModel"],function(Logger,API,ListModel){return class extends ListModel{add(domain,skipSave,silent){if(domain="string"==typeof domain?domain.toLowerCase():"",API.StayFocusd.isMaxTimeAllowedExceeded()){if(API.Component.get("Blacklist","blacklist").model.has(domain))return alert(API.Chrome.Translation.get("cannotAllowBlockedSiteOnceTimeIsUp")),!1;if(-1<domain.indexOf("*"))return alert(API.Chrome.Translation.get("cannotAllowSitesUsingWildcardsOnceTimeIsUp")),!1}return API.NuclearOption.isActive()?(alert(API.Chrome.Translation.get("cannotAddAllowedSitesDuringNuclearOption")),!1):super.add(domain,skipSave,silent)}addListeners(){var self=this;super.addListeners(),API.PubSub.listen("Settings.data.refreshed",function(message,payload){payload.changes.whitelist&&self.load()})}canRemoveSiteWhenMaxTimeAllowedExceeded(){return!0}}});