define(["core/API","core/Time","utils/isHostnameBlocked"],(API,Time,{isHostnameBlocked,getBlocklist,getAllowlist})=>class{summary=[];isShowAds=!1;async loadData(){const now=Date.now();var startDate=Time.getToday(),endDate=startDate+Time.DAY;const port=chrome.runtime.connect({name:"getUsageSummaryData"}),{sessions,ads}=(port.postMessage({message:"usage.getUsageSummaryData.request",startDate:startDate,endDate:endDate}),await new Promise(resolve=>{port.onMessage.addListener(function(data){"usage.getUsageSummaryData.response"===data.message&&resolve({sessions:data.sessions,ads:data.ads})})})),blocklist=await getBlocklist(),allowlist=await getAllowlist(),maxAllowedTimeMs=(await API.Storage.getAsync("maxTimeAllowed")??10)*Time.MINUTE;let totalDuration=0;startDate=sessions.reduce((acc,session)=>{if(isHostnameBlocked(session.appId,blocklist,allowlist)){let duration=(session.endedAt??now)-session.startedAt;totalDuration+duration>maxAllowedTimeMs&&(duration=maxAllowedTimeMs-totalDuration),totalDuration+=duration,acc.push({website:session.appId,duration:duration,adCount:ads.filter(ad=>ad.sessionId==session.id).length})}return acc},[]).reduce((acc,session)=>{var elem=acc.find(item=>item.website==session.website);return null!=elem?(elem.duration+=session.duration,elem.adCount+=session.adCount):acc.push({website:session.website,duration:session.duration,adCount:session.adCount}),acc},[]);this.summary=startDate.sort((a,b)=>b.duration-a.duration)}});