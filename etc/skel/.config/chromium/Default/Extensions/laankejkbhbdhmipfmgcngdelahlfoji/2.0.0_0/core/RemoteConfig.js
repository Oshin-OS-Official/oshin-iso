define(["core/Logger","core/Time"],(Logger,Time)=>{const log=(funcName,message,payload,level)=>{Logger.log("RemoteConfig."+funcName,message,payload,level)};var API;return{cache:{},initialized:!1,defaults:{onboardingEnabledPercentInt2:0,defaultAmplitudeSampling:.1,amplitudeSampling:{},newTabTimeout:3*Time.DAY,uploadWebUsage:!0,usageUploadBatchSize:500,pageViewAllowlist:[],incrementalRollout:{},bugsnagSampling:.01,bugsnagIgnoreMatches:["Extension context invalidated.","Could not establish connection. Receiving end does not exist.","The browser is shutting down.",'{\\s*"?isTrusted"?:\\s*true\\s*}',"Failed to execute 'abort' on 'IDBTransaction': The transaction has finished.","Failed to execute 'transaction' on 'IDBDatabase': The database connection is closing.","^IO error: \\.\\.\\.\\/.+?: .*? \\(ChromeMethodBFE: .*\\)$","Cannot access contents of the page. Extension manifest must request permission to access the respective host.","The extensions gallery cannot be scripted."]},url:"https://stayfocusd.st-panel-api.com/v1/remote_config/stayfocusd",sharedConfigUrl:"https://stayfocusd.st-panel-api.com/v1/remote_config/shared-web-config",storageKey:"remote-config",initAPI(theAPI){(API=theAPI).mixin("RemoteConfig",{storageKey:this.storageKey,init:this.init.bind(this),get:this.get.bind(this),refresh:this.refresh.bind(this)})},async init(){this.initialized?log("init","RemoteConfig already initialized",this.cache,"DEBUG"):(log("init","Initializing RemoteConfig",this.defaults,"DEBUG"),this.initialized=!0,this.cache={...this.defaults},this.cache={...this.cache,...await API.Storage.getAsync(this.storageKey)},log("init","Initialized",this.cache,"DEBUG"))},async refresh(){log("refresh","Refreshing...",{currentConfig:this.cache},"DEBUG");try{var latestConfig=await fetch(this.url).then(res=>res.json()),latestSharedConfig=await fetch(this.sharedConfigUrl).then(res=>res.json());log("refresh","Fetched config",latestConfig,"DEBUG"),this.cache={...this.defaults,...latestConfig,...latestSharedConfig},await API.Storage.setAsync({[this.storageKey]:this.cache}),log("refresh","Saved config",this.cache,"DEBUG")}catch(err){log("refresh","Failed to fetch remote config",err,"WARN")}},get(key){if(this.inCache(key))return this.cache[key];throw new Error("[RemoteConfig.get()] "+key+" is not registered as a key in RemoteConfig.js")},inCache(key){return void 0!==this.cache[key]}}});