import{describe,expect,it,vi}from"vitest";import{importAMD,mockAMD}from"../../../testing/importAMD";const Chrome=mockAMD("core/Chrome"),Requirements=mockAMD("core/Requirements");async function getInstance(){var API=await importAMD("core/CoreAPI"),IconController=(API.Chrome=Chrome,API.Requirements=Requirements,await importAMD("components/Icon/IconController")),IconModel=await importAMD("components/Icon/IconModel"),IconView=await importAMD("components/Icon/IconView"),IconController=new IconController,IconModel=new IconModel,IconView=new IconView;return IconController.model=IconModel,(IconController.view=IconView).model=IconModel,IconController.initAPI(API),{API:API,controller:IconController,model:IconModel,view:IconView}}describe("Icon Component",()=>{describe("hideBadge",()=>{it("should set model.badgeVisible to false",async()=>{var{API,model}=await getInstance(),tabId=Math.random();API.Icon.hideBadge(tabId),expect(model.badgeVisible).toBe(!1)}),it("should clear any badge text",async()=>{var{API,view}=await getInstance(),tabId=Math.random(),view=vi.spyOn(view,"setBadgeText");API.Icon.hideBadge(tabId),expect(view).toBeCalledTimes(1),expect(view).toBeCalledWith("",tabId)})}),describe("setIcon",()=>{it("should set ALLOWED icon if onboarding completed",async()=>{var{API,view}=await getInstance(),tabId=Math.random(),view=vi.spyOn(view,"getIconURL");Requirements.isOnboardingCompleted.mockReturnValue(!0),await API.Icon.setIcon("ALLOWED",tabId),expect(view).toBeCalledTimes(1),expect(view).toBeCalledWith("ALLOWED")}),it("should set ONBOARDING icon",async()=>{var{API,view}=await getInstance(),tabId=Math.random(),view=vi.spyOn(view,"getIconURL");Requirements.isOnboardingCompleted.mockReturnValue(!1),await API.Icon.setIcon("ALLOWED",tabId),expect(view).toBeCalledTimes(1),expect(view).toBeCalledWith("ONBOARDING")})}),describe("showBadge",()=>{it("should set model.badgeVisible to true",async()=>{var{API,view,model}=await getInstance(),tabId=Math.random(),view=vi.spyOn(view,"setBadgeText");Requirements.isOnboardingCompleted.mockReturnValue(!1),await API.Icon.showBadge("","RED",tabId),expect(model.badgeVisible).toBe(!0),expect(view).toBeCalledTimes(1),expect(view).toBeCalledWith("",tabId)}),it("should set color",async()=>{var{API,view}=await getInstance(),tabId=Math.random(),setBadgeColor=vi.spyOn(view,"setBadgeColor");Requirements.isOnboardingCompleted.mockReturnValue(!1),await API.Icon.showBadge("","RED",tabId),expect(setBadgeColor).toBeCalledTimes(1),expect(setBadgeColor).toBeCalledWith(view.color.RED,tabId)})})});